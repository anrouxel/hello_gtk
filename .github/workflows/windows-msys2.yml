name: CI - build (Windows, MSYS2, GTK4)

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        # Use the msys2-provided shell helper for later steps
        shell: msys2 {0}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain (GNU)
        # Use the rust-toolchain action to install rustup + toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          # ensure the GNU target is available (if you plan to cross-compile or specifically target it)
          target: x86_64-pc-windows-gnu
          components: rustfmt, clippy

      - name: Setup MSYS2 and install packages (GTK4)
        id: msys2
        uses: msys2/setup-msys2@v2
        with:
          # choose environment (UCRT64 is recommended these days; MINGW64 also works)
          msystem: UCRT64
          update: true
          cache: true
          install: >-
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-gtk4
            mingw-w64-ucrt-x86_64-pkgconf
            mingw-w64-ucrt-x86_64-gettext
            mingw-w64-ucrt-x86_64-libxml2
            mingw-w64-ucrt-x86_64-librsvg

      - name: Show installed gtk pkg-config info
        run: |
          # verify pkg-config can find glib/gtk
          pkg-config --modversion gtk4 || true
          pkg-config --cflags --libs gtk4 || true

      - name: Cache cargo registry & target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release)
        # runs under msys2 shell thanks to defaults.shell above
        run: |
          # ensure we're using GNU toolchain (if necessary)
          rustup default stable
          # If you use specific features or targets, adapt the cargo command
          cargo build --release

      - name: Collect runtime DLLs & package
        run: |
          mkdir -p release_bundle
          cp target/release/*.exe release_bundle/ || true
          # Copy necessary DLLs from MSYS2 mingw64 bin to bundle so exe runs on a Windows machine
          # Adjust path if using MINGW64 vs UCRT64:
          cp /usr/bin/*.dll release_bundle/ || true
          ls -la release_bundle

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-release
          path: release_bundle
